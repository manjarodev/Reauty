// Generated by view binder compiler. Do not edit!
package com.app.blingy.reauty.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.constraintlayout.widget.Guideline;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.app.blingy.reauty.R;
import com.google.android.material.button.MaterialButton;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class LayoutBottomSheetGenderBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final MaterialButton btnFemale;

  @NonNull
  public final MaterialButton btnMale;

  @NonNull
  public final MaterialButton btnUndefined;

  @NonNull
  public final Guideline guideline;

  private LayoutBottomSheetGenderBinding(@NonNull ConstraintLayout rootView,
      @NonNull MaterialButton btnFemale, @NonNull MaterialButton btnMale,
      @NonNull MaterialButton btnUndefined, @NonNull Guideline guideline) {
    this.rootView = rootView;
    this.btnFemale = btnFemale;
    this.btnMale = btnMale;
    this.btnUndefined = btnUndefined;
    this.guideline = guideline;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static LayoutBottomSheetGenderBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static LayoutBottomSheetGenderBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.layout_bottom_sheet_gender, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static LayoutBottomSheetGenderBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btn_female;
      MaterialButton btnFemale = ViewBindings.findChildViewById(rootView, id);
      if (btnFemale == null) {
        break missingId;
      }

      id = R.id.btn_male;
      MaterialButton btnMale = ViewBindings.findChildViewById(rootView, id);
      if (btnMale == null) {
        break missingId;
      }

      id = R.id.btn_undefined;
      MaterialButton btnUndefined = ViewBindings.findChildViewById(rootView, id);
      if (btnUndefined == null) {
        break missingId;
      }

      id = R.id.guideline;
      Guideline guideline = ViewBindings.findChildViewById(rootView, id);
      if (guideline == null) {
        break missingId;
      }

      return new LayoutBottomSheetGenderBinding((ConstraintLayout) rootView, btnFemale, btnMale,
          btnUndefined, guideline);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
